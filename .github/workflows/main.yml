name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - development
      - main
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-22.2.0-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-22.2.0-

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.2.0'

    - name: Record start time
      id: start-time
      run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: Install dependencies
      run: npm install

    - name: Run development server
      run: npm run dev &
      env:
        NODE_ENV: development

    - name: Wait for server to start
      run: sleep 30

    - name: Check if server is running
      run: curl -I http://localhost:3000 | head -n 1

    - name: Stop development server
      run: |
        pkill -f "npm run dev" || true

    - name: Run build
      run: npm run build

    - name: Calculate build job duration
      id: build-duration
      run: |
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "BUILD_DURATION=$DURATION" >> $GITHUB_ENV

  merge:
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Git
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'

    - name: Fetch all branches
      run: git fetch --all

    - name: Check if development branch is ahead of current branch
      run: |
        BASE_BRANCH=development
        CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
        if [ "$(git rev-list --left-only --count $CURRENT_BRANCH...origin/$BASE_BRANCH)" -ne 0 ]; then
          echo "Development branch is ahead of the current branch. Aborting."
          exit 1
        fi

    - name: Rebase development branch onto current branch
      run: |
        git checkout development
        git rebase $GITHUB_HEAD_REF
        git push origin development --force

    - name: Merge pull request
      if: ${{ success() }}
      run: gh pr merge ${{ github.event.pull_request.number }} --merge
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Record start time for merge
      id: merge-start-time
      run: echo "MERGE_START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: Calculate merge job duration
      id: merge-duration
      run: |
        MERGE_END_TIME=$(date +%s)
        MERGE_DURATION=$((MERGE_END_TIME - MERGE_START_TIME))
        echo "MERGE_DURATION=$MERGE_DURATION" >> $GITHUB_ENV

  performance:
    runs-on: ubuntu-latest
    needs: [build_and_test, merge]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Collect and display performance metrics
      run: |
        echo "Build job duration: ${{ env.BUILD_DURATION }} seconds"
        echo "Merge job duration: ${{ env.MERGE_DURATION }} seconds"
        TOTAL_DURATION=$((BUILD_DURATION + MERGE_DURATION))
        echo "Total CI/CD pipeline duration: $TOTAL_DURATION seconds"
